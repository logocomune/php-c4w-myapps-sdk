<?php

namespace MyAppsSdk\Test\Context;

use MyAppsSdk\Context\Customer;
use PHPUnit_Framework_TestCase;

class CustomerTest extends PHPUnit_Framework_TestCase
{

    private $preAuthData;

    private $postAuthData;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->preAuthData = json_decode(file_get_contents(__DIR__ . "/../samples/pre-auth.json"), true)['data']['customer'];

        $this->postAuthData = json_decode(file_get_contents(__DIR__ . "/../samples/post-auth.json"), true)['data']['customer'];
    }

    public function testGetLang()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertEquals('eng', $customer->getLang());
    }

    public function testIsLogged()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertEquals(false, $customer->isLogged());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals(true, $customer->isLogged());
    }

    public function testId()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertNull($customer->getId());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals("rlC.6yTePhzYg", $customer->getId());
    }

    public function testFirstName()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertNull($customer->getFirstName());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals("John", $customer->getFirstName());
    }

    public function testLastName()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertNull($customer->getLastName());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals("Doe", $customer->getLastName());
    }

    public function testUsername()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertNull($customer->getUsername());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals("706B5C1D", $customer->getUsername());
    }

    public function testGender()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertNull($customer->getGender());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals(Customer::GENDER_MALE, $customer->getGender());

        $customer = new Customer(['gender'=>'male']);
        $this->assertEquals(Customer::GENDER_MALE, $customer->getGender());

        $customer = new Customer(['gender'=>'Maschio']);
        $this->assertEquals(Customer::GENDER_MALE, $customer->getGender());

        $customer = new Customer(['gender'=>' Maschio']);
        $this->assertEquals(Customer::GENDER_MALE, $customer->getGender());

        $customer = new Customer(['gender'=>'female']);
        $this->assertEquals("F", $customer->getGender());

        $customer = new Customer(['gender'=>'Femmina']);
        $this->assertEquals("F", $customer->getGender());

        $customer = new Customer(['gender'=>' female']);
        $this->assertEquals("F", $customer->getGender());

        $customer = new Customer(['gender'=> null]);
        $this->assertEquals(Customer::GENDER_UNKNOWN, $customer->getGender());
    }

    public function testBirthDate()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertNull($customer->getBirthDate());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals("0000-00-00 00:00:00", $customer->getBirthDate());
    }

    public function testPhone()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertNull($customer->getPhone());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals("123", $customer->getPhone());
    }

    public function testPhonePrefix()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertNull($customer->getPhonePrefix());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals("+55", $customer->getPhonePrefix());
    }

    public function testEmail()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertNull($customer->getEmail());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals("john.doe@cloud4wi.com", $customer->getEmail());
    }

    public function testMacAddress()
    {
        $customer = new Customer($this->preAuthData);
        $this->assertEmpty($customer->getMacAddress());

        $customer = new Customer($this->postAuthData);
        $this->assertEquals(1, count($customer->getMacAddress()));
    }
}
